# Default values for bolcd
replicaCount: 2

image:
  repository: ghcr.io/fitydo/bol-cd
  pullPolicy: IfNotPresent
  tag: "6d4cbdc6"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  rbac:
    create: true

# Service account for background jobs/crons
jobServiceAccount:
  create: true
  annotations: {}
  name: ""
  rbac:
    create: true

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
  hosts:
    - host: bolcd.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: bolcd-tls
      hosts:
        - bolcd.example.com
  basicAuth:
    enabled: false
    secretName: "bolcd-basic-auth"
    realm: "BOL-CD Access"
  exposeMetrics: false
  whitelistSourceRanges: []

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Horizontal Pod Autoscaler
hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

# Application configuration
config:
  # Database
  database:
    url: "postgresql://bolcd:password@postgresql:5432/bolcd"
    maxConnections: 20
    poolSize: 10
  
  # Redis
  redis:
    url: "redis://redis:6379/0"
    ttl: 3600
  
  # Policy parameters
  policy:
    alpha: "0.01"  # ADR-0002 compliant
    supportMin: "20"
    liftMin: "1.5"
    nearWindowSec: "3600"
    lateTtlSec: "86400"
    falseSuppressionThreshold: "0.3"
    highSeverityProtection: "true"
    rootPass: "true"
    allowlistRules: "R-CRITICAL-1,R-CRITICAL-2"
    policyVersion: "safe-1.0.0"
  
  # API Keys (will be overridden by secrets)
  apiKeys: ""
  
  # SIEM connectors
  siem:
    splunkUrl: ""
    splunkToken: ""
    splunkAuthScheme: "bearer"
    azureTenantId: ""
    azureClientId: ""
    azureClientSecret: ""
    opensearchUrl: ""
    opensearchUser: ""
    opensearchPassword: ""
  
  # Rate limiting
  rateLimit:
    enabled: true
    requestsPerMinute: 100
    burstSize: 200
  
  # Monitoring
  monitoring:
    metricsEnabled: true
    tracingEnabled: true
    loggingLevel: "INFO"
    loggingFormat: "json"

# CronJob for late replay reconciler
reconciler:
  enabled: true
  schedule: "*/15 * * * *"  # Every 15 minutes
  image:
    repository: ghcr.io/example/bol-cd
    tag: "latest"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3

# PostgreSQL subchart configuration
postgresql:
  enabled: true
  auth:
    database: bolcd
    username: bolcd
    password: changeme  # Override in production
    postgresPassword: changeme  # Override in production
  primary:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi

# Redis subchart configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: changeme  # Override in production
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Monitoring configuration
monitor:
  serviceAnnotationsEnabled: true
  grafana:
    enabled: true
    folder: "BOL-CD"
  
# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  path: /metrics
  labels:
    prometheus: kube-prometheus

# PrometheusRule for alerting
prometheusRule:
  enabled: true
  rules:
    - alert: HighFalseSuppressionRate
      expr: rate(bolcd_false_suppression_total[5m]) > 0.1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High false suppression rate detected"
        description: "False suppression rate is {{ $value }} (threshold: 0.1)"
    
    - alert: LowReductionRate
      expr: (1 - (rate(bolcd_suppress_total[5m]) / rate(bolcd_alerts_total[5m]))) < 0.3
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "Low alert reduction rate"
        description: "Reduction rate is {{ $value }} (threshold: 30%)"
    
    - alert: HighLatency
      expr: histogram_quantile(0.95, rate(bolcd_decision_latency_seconds_bucket[5m])) > 0.5
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High decision latency"
        description: "95th percentile latency is {{ $value }}ms (threshold: 500ms)"

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 443   # HTTPS for external APIs

# External Secrets
externalSecrets:
  enabled: false
  refreshInterval: "1h"
  secretStoreRef:
    name: "vault-backend"
    kind: "ClusterSecretStore"
  targetName: ""  # defaults to {fullname}-secrets
  data:
    - secretKey: "database-password"
      remoteRef:
        key: "database/prod"
        property: "password"
    - secretKey: "redis-password"
      remoteRef:
        key: "redis/prod"
        property: "password"

# Cron Jobs
cron:
  recompute:
    enabled: true
    schedule: "0 3 * * *"  # Daily at 3 AM
    body: '{"fdr_q": 0.01, "epsilon": 0.005}'
    operatorApiKey: "testop"
    operatorApiKeySecret:
      name: ""
      key: ""
  cleanup:
    enabled: true
    schedule: "30 3 * * *"  # Daily at 3:30 AM
    keepDays: 14
  abWeekly:
    enabled: true
    schedule: "0 4 * * 1"  # Every Monday at 04:00
    prefixA: "/reports/raw/splunk_A_"
    prefixB: "/reports/raw/splunk_B_"
    keys: ["host","index","sourcetype","source","component","group"]
  abNotify:
    enabled: false
    schedule: "15 7 * * *"  # Daily at 07:15
    webhookSecret:
      name: "ab-notify-webhook"
      key: "url"
  abDaily:
    enabled: false
    schedule: "5 1 * * *"
    hours: 24
    splunk:
      index: "_internal"
      exclude: "sourcetype=splunkd*"
      # url: "https://yoursplunk"
      # verify: true
    # keys: ["host","index","sourcetype","source","component","group"]
    extraEnv: []

# KPI Computation
kpi:
  enabled: true
  schedule: "15 3 * * *"  # Daily at 3:15 AM
  reportsDir: "/reports"
  costPerGbUSD: 0.10
  ingestAGB: 1.0
  ingestBGB: 1.0

# Reports Persistent Volume Claim
reportsPVC:
  enabled: true
  existingClaim: ""
  storageClass: ""
  size: "10Gi"
  accessModes:
    - ReadWriteOnce