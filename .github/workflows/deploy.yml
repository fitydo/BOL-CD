name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff mypy

      - name: Install Node dependencies
        working-directory: ./web
        run: npm ci

      - name: Run Python linting
        run: |
          ruff check .
          mypy src/

      - name: Run Python tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:src"
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run Node tests
        working-directory: ./web
        run: |
          npm run test:ci || true
          npm run lint

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.bolcd.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          helm upgrade --install bolcd-staging ./deploy/helm/bolcd \
            --namespace bolcd-staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set ingress.hosts[0].host=staging.bolcd.example.com \
            --wait \
            --timeout 10m

      - name: Run smoke tests
        run: |
          ./scripts/smoke_test.sh staging.bolcd.example.com

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Staging deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment:* ${{ job.status }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production
  deploy-production:
    needs: [build-and-test, deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://bolcd.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create backup before deployment
        run: |
          kubectl exec -n bolcd-production deployment/bolcd -- \
            /app/scripts/backup.sh pre-deploy-${{ github.sha }}

      - name: Deploy to production (Blue-Green)
        run: |
          # Deploy to green environment
          helm upgrade --install bolcd-green ./deploy/helm/bolcd \
            --namespace bolcd-production \
            --set image.tag=${{ github.ref_name }} \
            --set ingress.enabled=false \
            --set service.selector=green \
            --wait \
            --timeout 10m
          
          # Run health checks on green
          ./scripts/health_check.sh bolcd-green-service
          
          # Switch traffic to green
          kubectl patch service bolcd-service -n bolcd-production \
            -p '{"spec":{"selector":{"deployment":"green"}}}'
          
          # Wait and verify
          sleep 30
          ./scripts/smoke_test.sh bolcd.example.com
          
          # Scale down blue deployment
          kubectl scale deployment bolcd-blue -n bolcd-production --replicas=0

      - name: Run production tests
        run: |
          ./scripts/production_test.sh bolcd.example.com

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl patch service bolcd-service -n bolcd-production \
            -p '{"spec":{"selector":{"deployment":"blue"}}}'
          kubectl scale deployment bolcd-blue -n bolcd-production --replicas=2

      - name: Create release notes
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            CHANGELOG.md
            docs/release-notes-${{ github.ref_name }}.md

      - name: Notify team
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Production deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ðŸš€ Production Deployment:* ${{ job.status }}\n*Version:* ${{ github.ref_name }}\n*URL:* https://bolcd.example.com"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
