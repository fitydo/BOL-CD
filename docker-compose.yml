version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bolcd-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: bolcd
      POSTGRES_USER: bolcd_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - bolcd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bolcd_user -d bolcd"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bolcd-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bolcd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # BOL-CD Application
  bolcd:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bolcd-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://bolcd_user:${DB_PASSWORD:-changeme}@postgres:5432/bolcd
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      BOLCD_API_HOST: 0.0.0.0
      BOLCD_API_PORT: 8080
    volumes:
      - ./data:/var/lib/bolcd/data
      - ./logs:/var/log/bolcd
      - ./certs:/app/certs:ro
      - ./configs:/app/configs:ro
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bolcd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bolcd-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - bolcd-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: bolcd-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-changeme}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3030:3000"
    depends_on:
      - prometheus
    networks:
      - bolcd-network

  # Nginx Load Balancer (optional for multiple instances)
  nginx:
    image: nginx:alpine
    container_name: bolcd-nginx
    restart: unless-stopped
    volumes:
      - ./configs/nginx/bolcd.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "8443:443"
      - "8000:80"
    depends_on:
      - bolcd
    networks:
      - bolcd-network

networks:
  bolcd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
